generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String         @unique
  studentId         Int?
  password          String?
  bio               String?
  image             String?
  phone             String?
  createdAt         DateTime?      @default(now())
  role              String?        @default("user")
  verified          Boolean        @default(false)
  book              Book[]
  conversationIds   String[]       @db.ObjectId
  conversations     Conversation[] @relation(fields: [conversationIds], references: [id])
  messages          Message[]
  chat_notification Int?           @default(0)
  Report            Report[]
}

model Book {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  bookEdition   Int
  authorName    String
  publisher     String
  publishedYear Int
  price         Int?      @default(0)
  purpose       String
  coverImg      String
  inStock       Boolean   @default(true)
  status        String?   @default("Pending")
  createdAt     DateTime? @default(now())
  userId        String    @db.ObjectId
  author        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  lastMessageAt DateTime  @default(now())
  messages      Message[]
  userIds       String[]  @db.ObjectId
  users         User[]    @relation(fields: [userIds], references: [id])
  Report        Report[]
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  text           String?
  createdAt      DateTime     @default(now())
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  senderId       String       @db.ObjectId
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Report {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  reporterId     String       @db.ObjectId
  createdAt      DateTime     @default(now())
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  reporter       User         @relation(fields: [reporterId], references: [id], onDelete: Cascade)
}
